# 기본 명령어
git init
git pull
git add
git commit
git push

# 순서
$ git init
$ git remote add origin "repository address"
$ git add .
$ git status
$ git commit -m "message"
$ git push -u origin master




1. github에 repository를 생성합니다.
2. repository 생성하면 주소를 확인한다. (나중에 주소가 필요하다.)
3. 저장할 폴더를 만들어 준다
4. 커맨드 실행창을 열어서 저장할 폴더의 디렉토리 경로로 이동해준다.

# Local 파일을 Github에 올릴 때.
5. git init
- 새로운 Local Repository 를 생성(.git 숨김 폴더 생성)
6. git remote add origin [Github 주소]
- origin(다른명칭 사용가능?)은 remote repository(주소)의 별칭이다. 매번 remote repository의 주소를 입력하는 것이 귀찮으므로 별칭으로 등록해준다.
일반적으로 origin을 사용한다.
- 이러면 github에 있는 저장소로 연결이 된거고 이제 push만 해주면 끝납니다.
- push를 할 때마다 이전에 작성하신 origin(저장소에 접속할 이름)을 기입하셔야 하니 까먹지말아주세요.
7. git status
- 매우 유용하다.
- 명령어가 동작하지 않을 때 에러 확인.
- 내가 작업한 파일 외에 다른 파일이 수정되진 않았는지 확인.
- 언제든 명령어를 실행하여 확인 가능.
- git status를 통해 올라갈 파일을 확인해준다. (git diff를 사용하면 원격 저장소와의 차이점을 알 수 있음)

8. git add [파일명] or .(comma)
- 파일명 대신 뒤에 점을 붙이면 전체파일을 업로드한다는 의미이다.
- .(점) 옵션을 이용하여 모든파일을 올리려고 할때 로컬영역에 폴더가 생성되어 있어도 안에 파일이 존재하지 않다면 remote(github)에 업로드 되지 않는다.
9. git commit -m "메시지 내용 작성"
- history 관리를 위하여 내용을 작성한다.
- -m 옵션은 간단하게 한줄로 메시지를 작성하기 위함.
- 긴 메시지를 작성한다면 git commit 명령어만 실행한다.
10. git push origin [브랜치명]
	git push -u origin [브랜치명] ???
	git push
- 처음 github를 사용한다면 기본 브랜치 명이 master 임으로 git push origin master 를 실행해 준다.
- remote repository(주소)를 생성하면 기본적으로 master 브랜치가 생성된다.
- 참고로 브랜치는 독립적인 작업 공간을 의미하며, 브랜치 덕분에 협업이 수월해지기 때문에 꼭 알아둬야 하는 개념입니다.
- master가 아닌 다른 branch로 push 하고 싶으면, 아래와 같이 master를 특정 브랜치명으로 바꿔서 명령어를 실행하면 됩니다.
- 이미 원격소에 내용이 있을 경우 바로 push가 안 될 경우가 있다. 이 경우에는 git pull 명령어를 활용하여 내용을 업데이트한 뒤, git push를 하면 된다.
- 매번 push할 때 master[브랜치명]은 항상 쓰셔야 됩니다.
- 처음에 push를 하면 github의 계정과 패스워드를 입력하는 팝업이 뜹니다.



# Github 파일을 Local에 받을 때.
1. git clone [remote repository 주소]
- clone를 하게되면 .git 파일이 자동생성되어 따로 git init 명령어를 실행 안해도 된다.
- 받은 파일을 수정하고 업로드를 하려면 전의 업록드하듯이 똑같은 방법으로 명령어를 실행하면 된다.
- clone을 하게 되면 저번 포스팅에 언급했던 git init까지 자동으로 설정 됩니다.







# 가끔 commit을 잘못해서 되돌려야하는 상황이 발생하는경우 구글 검색하기
# https://gist.github.com/ihoneymon/652be052a0727ad59601
위 링크에서 마크다운 문법을 간단히 확인하실 수 있습니다.

방금 만든 파일은 현재 우리 컴퓨터 디렉토리(작업 디렉토리)에 있습니다.
이 파일을 깃에 전달하기 위해서는 준비를 해야합니다(스테이징 영역)
준비가 된 파일들을 전달합니다(커밋 - 로컬저장소)
커밋한 파일들을 원격저장소로 업로드합니다(푸시- 원격저장소)












##########################################
##########################################
##########################################
##########################################



# git branch

1. branch 만드는 방법
$ git branch [branch 이름]
ex) git branch new_area (new_area 이름으로 브랜치 생성.)


2. branch 목록 확인 방법
$ git branch
  new_area
* master
(* 표시는 현재 선택된 브랜치 입니다.)


3. branch new_area 선택하기(checkout 하기)
branch를 만들어도 현재 선택된 branch는 master로 되어있을 것이다.
checkout 명령어를 사용하여 new_area로 선택되게 변경한다.
ex)git checkout [만든 branch명]
git checkout new_area

** branch를 만들고 바로 checkout 해주는 -b옵션을 이용하면 더 빠르다
git checkout -b new_area


4. 로컬 branch를 branch remote(원격)에 적용하기
브랜치를 만들었다고 remote(원격) 영역에 바로 적용되는 것이 아니다.
적용을 위해서는 push를 해야한다.

git push origin [branch 명]
ex) git push origin new_area

git push --set-upstream origin new_area
git push -u origin new_area

checkout 변경해도
이걸하면 push or pull 떄 따로 뒤에 붙는 주소를 쓸 필요없다.
참고)명령에서 사용한 -u 옵션은 --set-upstream 옵션의 짧은 표현인데 브랜치를 추적하도록 설정해서 이후 Push 나 Pull 할 때 좀 더 편하게 사용할 수 있다.


5. branch 삭제하기.
삭제할 branch 로 checkout 하여 이동한 다음 다음과 같은 명령어를 입력해준다.

$ git branch --delete new_area

하지만 작업한 사항이나 commint한 이력이 남아있을 경우
해당 명령어로 삭제되지 않는 경우가 있따.
이러한경우 다음과 같이 강제로 삭제한다.

$ git branch -d new_area
HEAD에 병합되어 있지 않은 커밋이 있는 경우, 브랜치를 삭제할 수 없습니다. 병합되어 있지 않은 커밋이 있는 브랜치를 강제로 삭제하려면, -D 옵션을 붙여 실행합니다.

위의 방법으로 Local branch를 삭제 하였다.
remote branch를 삭제하는 방법은 다음과 같다.

$ git push origin :new_area


6. branch 병합하기
병합을 할 branch로 checkout 하여 이동한다음 다음 명령어를 작성한다.
---> master 로 이동 후.
$ git merge new_area